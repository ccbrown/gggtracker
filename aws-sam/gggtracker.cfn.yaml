AWSTemplateFormatVersion: '2010-09-09'
Description: github.com/ccbrown/gggtracker
Parameters:
  BinaryMediaType:
    Type: String
    AllowedValues:
      - '*~1*'
      - '*/*'
    Description: See https://forums.aws.amazon.com/thread.jspa?messageID=797934
  CodeS3Bucket:
    Type: String
    Description: The bucket that contains the code to deploy.
  CodeS3Key:
    Type: String
    Description: The key for the code to deploy.
  CertificateARN:
    Type: String
    Description: A certificate corresponding to DomainName.
  DomainName:
    Type: String
    Description: The desired domain name. It'll be up to you to actually change your DNS after the stack is deployed.
  GoogleAnalytics:
    Type: String
    Default: ''
Resources:
  API:
    Type: AWS::ApiGateway::RestApi
    Properties:
      BinaryMediaTypes:
        - !Ref BinaryMediaType
      Name: !Ref AWS::StackName
  APIAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt APICloudWatchRole.Arn
  APIBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    DependsOn: APIDomainName
    Properties:
      DomainName: !Ref DomainName
      RestApiId: !Ref API
      Stage: !Ref APIStage
  APIBasePathMappingSubdomain1:
    Type: AWS::ApiGateway::BasePathMapping
    DependsOn: APISubdomainName1
    Properties:
      DomainName: !Sub br.${DomainName}
      RestApiId: !Ref API
      Stage: !Ref APIStage
  APIBasePathMappingSubdomain2:
    Type: AWS::ApiGateway::BasePathMapping
    DependsOn: APISubdomainName2
    Properties:
      DomainName: !Sub ru.${DomainName}
      RestApiId: !Ref API
      Stage: !Ref APIStage
  APIBasePathMappingSubdomain3:
    Type: AWS::ApiGateway::BasePathMapping
    DependsOn: APISubdomainName3
    Properties:
      DomainName: !Sub th.${DomainName}
      RestApiId: !Ref API
      Stage: !Ref APIStage
  APIBasePathMappingSubdomain4:
    Type: AWS::ApiGateway::BasePathMapping
    DependsOn: APISubdomainName4
    Properties:
      DomainName: !Sub de.${DomainName}
      RestApiId: !Ref API
      Stage: !Ref APIStage
  APIBasePathMappingSubdomain5:
    Type: AWS::ApiGateway::BasePathMapping
    DependsOn: APISubdomainName5
    Properties:
      DomainName: !Sub fr.${DomainName}
      RestApiId: !Ref API
      Stage: !Ref APIStage
  APIBasePathMappingSubdomain6:
    Type: AWS::ApiGateway::BasePathMapping
    DependsOn: APISubdomainName6
    Properties:
      DomainName: !Sub es.${DomainName}
      RestApiId: !Ref API
      Stage: !Ref APIStage
  APIBasePathMappingSubdomain7:
    Type: AWS::ApiGateway::BasePathMapping
    DependsOn: APISubdomainName7
    Properties:
      DomainName: !Sub www.${DomainName}
      RestApiId: !Ref API
      Stage: !Ref APIStage
  APICloudWatchRole: 
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement: 
          - Effect: Allow
            Principal: 
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
  APIDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      CertificateArn: !Ref CertificateARN
      DomainName: !Ref DomainName
      EndpointConfiguration:
        Types:
          - EDGE
  APISubdomainName1:
    Type: AWS::ApiGateway::DomainName
    Properties:
      CertificateArn: !Ref CertificateARN
      DomainName: !Sub br.${DomainName}
      EndpointConfiguration:
        Types:
          - EDGE
  APISubdomainName2:
    Type: AWS::ApiGateway::DomainName
    Properties:
      CertificateArn: !Ref CertificateARN
      DomainName: !Sub ru.${DomainName}
      EndpointConfiguration:
        Types:
          - EDGE
  APISubdomainName3:
    Type: AWS::ApiGateway::DomainName
    Properties:
      CertificateArn: !Ref CertificateARN
      DomainName: !Sub th.${DomainName}
      EndpointConfiguration:
        Types:
          - EDGE
  APISubdomainName4:
    Type: AWS::ApiGateway::DomainName
    Properties:
      CertificateArn: !Ref CertificateARN
      DomainName: !Sub de.${DomainName}
      EndpointConfiguration:
        Types:
          - EDGE
  APISubdomainName5:
    Type: AWS::ApiGateway::DomainName
    Properties:
      CertificateArn: !Ref CertificateARN
      DomainName: !Sub fr.${DomainName}
      EndpointConfiguration:
        Types:
          - EDGE
  APISubdomainName6:
    Type: AWS::ApiGateway::DomainName
    Properties:
      CertificateArn: !Ref CertificateARN
      DomainName: !Sub es.${DomainName}
      EndpointConfiguration:
        Types:
          - EDGE
  APISubdomainName7:
    Type: AWS::ApiGateway::DomainName
    Properties:
      CertificateArn: !Ref CertificateARN
      DomainName: !Sub www.${DomainName}
      EndpointConfiguration:
        Types:
          - EDGE
  APIProxyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt API.RootResourceId
      PathPart: '{proxy+}'
      RestApiId: !Ref API
  APIRootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIFunction.Arn}/invocations
      ResourceId: !GetAtt API.RootResourceId
      RestApiId: !Ref API
  APIProxyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIFunction.Arn}/invocations
      ResourceId: !Ref APIProxyResource
      RestApiId: !Ref API
  APIDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - APIRootMethod
      - APIProxyMethod
    Properties:
      RestApiId: !Ref API
  APIStage:
    Type: AWS::ApiGateway::Stage
    DependsOn:
      - APIAccount
    Properties:
      DeploymentId: !Ref APIDeployment
      MethodSettings:
        - HttpMethod: '*'
          LoggingLevel: ERROR
          MetricsEnabled: true
          ResourcePath: /*
      RestApiId: !Ref API
      StageName: stage
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: hk
          AttributeType: B
        - AttributeName: rk
          AttributeType: B
      KeySchema:
        - AttributeName: hk
          KeyType: HASH
        - AttributeName: rk
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 25
        WriteCapacityUnits: 50
  APIFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref CodeS3Bucket
        S3Key: !Ref CodeS3Key
      Environment:
        Variables:
          GGGTRACKER_DYNAMODB_TABLE: !Ref DynamoDBTable
          GGGTRACKER_GA: !Ref GoogleAnalytics
      Handler: main
      MemorySize: 128
      Role: !GetAtt AppFunctionRole.Arn
      Runtime: go1.x
      Timeout: 60
  APIFunctionAPIPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt APIFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${API}/*/*/*
  AppFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: gggtracker
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: dynamodb:*
                Resource:
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTable}
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTable}/*
